import { KeycloakConfig } from '../interfaces/keycloak'
import { createContext, useContext, useState } from 'react'

export const KeycloakConfigurationContext = createContext({})

export const useKeycloakConfigurationContext: {
  (): {
    config: KeycloakConfig & any
    setConfig: React.Dispatch<React.SetStateAction<KeycloakConfig & any>>
  }
} = () => useContext(KeycloakConfigurationContext as React.Context<any>)

export const KeycloakConfigurationContextProvider = ({
  children,
}: {
  children: React.ReactNode
}) => {
  const [config, setConfig] = useState<KeycloakConfig & any>({
    id: 'fdec0782-8bde-4f05-9d6f-a72c55cac066',
    realm: 'master',
    displayName: 'Keycloak',
    displayNameHtml: '<div class="kc-logo-text"><span>Keycloak</span></div>',
    notBefore: 0,
    defaultSignatureAlgorithm: 'RS256',
    revokeRefreshToken: false,
    refreshTokenMaxReuse: 0,
    accessTokenLifespan: 1800,
    accessTokenLifespanForImplicitFlow: 900,
    ssoSessionIdleTimeout: 1800,
    ssoSessionMaxLifespan: 36000,
    ssoSessionIdleTimeoutRememberMe: 0,
    ssoSessionMaxLifespanRememberMe: 0,
    offlineSessionIdleTimeout: 2592000,
    offlineSessionMaxLifespanEnabled: false,
    offlineSessionMaxLifespan: 5184000,
    clientSessionIdleTimeout: 0,
    clientSessionMaxLifespan: 0,
    clientOfflineSessionIdleTimeout: 0,
    clientOfflineSessionMaxLifespan: 0,
    accessCodeLifespan: 60,
    accessCodeLifespanUserAction: 300,
    accessCodeLifespanLogin: 1800,
    actionTokenGeneratedByAdminLifespan: 43200,
    actionTokenGeneratedByUserLifespan: 300,
    oauth2DeviceCodeLifespan: 600,
    oauth2DevicePollingInterval: 5,
    enabled: true,
    sslRequired: 'external',
    registrationAllowed: false,
    registrationEmailAsUsername: false,
    rememberMe: false,
    verifyEmail: false,
    loginWithEmailAllowed: true,
    duplicateEmailsAllowed: false,
    resetPasswordAllowed: false,
    editUsernameAllowed: false,
    bruteForceProtected: false,
    permanentLockout: false,
    maxTemporaryLockouts: 0,
    maxFailureWaitSeconds: 900,
    minimumQuickLoginWaitSeconds: 60,
    waitIncrementSeconds: 60,
    quickLoginCheckMilliSeconds: 1000,
    maxDeltaTimeSeconds: 43200,
    failureFactor: 30,
    roles: {
      realm: [
        {
          id: 'e50850cf-5dc7-45c5-8060-1e50f4bbaac6',
          name: 'admin',
          description: '${role_admin}',
          composite: true,
          composites: {
            realm: ['create-realm'],
            client: {
              'master-realm': [
                'query-clients',
                'manage-events',
                'create-client',
                'impersonation',
                'query-groups',
                'view-users',
                'view-realm',
                'view-clients',
                'view-authorization',
                'manage-identity-providers',
                'query-realms',
                'view-identity-providers',
                'manage-authorization',
                'manage-clients',
                'query-users',
                'manage-realm',
                'view-events',
                'manage-users',
              ],
            },
          },
          clientRole: false,
          containerId: 'fdec0782-8bde-4f05-9d6f-a72c55cac066',
          attributes: {},
        },
        {
          id: '9185778f-f159-45dd-ae85-0f9984e29866',
          name: 'offline_access',
          description: '${role_offline-access}',
          composite: false,
          clientRole: false,
          containerId: 'fdec0782-8bde-4f05-9d6f-a72c55cac066',
          attributes: {},
        },
        {
          id: 'e467e82b-b595-4dd9-91b5-52238f5b042f',
          name: 'default-roles-master',
          description: '${role_default-roles}',
          composite: true,
          composites: {
            realm: ['offline_access', 'uma_authorization'],
            client: {
              account: ['manage-account', 'view-profile'],
            },
          },
          clientRole: false,
          containerId: 'fdec0782-8bde-4f05-9d6f-a72c55cac066',
          attributes: {},
        },
        {
          id: '7a130892-9f7f-402e-8321-f534946f5985',
          name: 'uma_authorization',
          description: '${role_uma_authorization}',
          composite: false,
          clientRole: false,
          containerId: 'fdec0782-8bde-4f05-9d6f-a72c55cac066',
          attributes: {},
        },
        {
          id: '66ab825a-cc2a-4f83-9b12-7c324d9e2866',
          name: 'create-realm',
          description: '${role_create-realm}',
          composite: false,
          clientRole: false,
          containerId: 'fdec0782-8bde-4f05-9d6f-a72c55cac066',
          attributes: {},
        },
      ],
      client: {
        'security-admin-console': [],
        'rest-api-client': [],
        'admin-cli': [],
        'account-console': [],
        broker: [
          {
            id: 'aae5a103-9207-493b-93f2-30fab6a2553c',
            name: 'read-token',
            description: '${role_read-token}',
            composite: false,
            clientRole: true,
            containerId: 'd27c108f-ab4b-4647-ab02-0658c15026e5',
            attributes: {},
          },
        ],
        'master-realm': [
          {
            id: 'e2a2415d-3827-46e7-86f5-c9105379af9b',
            name: 'manage-events',
            description: '${role_manage-events}',
            composite: false,
            clientRole: true,
            containerId: '22a34c55-3b60-43a7-b142-987623979ca4',
            attributes: {},
          },
          {
            id: '5f06ce45-cfd1-41cb-952c-bb9d4f773737',
            name: 'query-clients',
            description: '${role_query-clients}',
            composite: false,
            clientRole: true,
            containerId: '22a34c55-3b60-43a7-b142-987623979ca4',
            attributes: {},
          },
          {
            id: 'ab1e204b-9931-4b92-84d1-fb690e06a6d0',
            name: 'create-client',
            description: '${role_create-client}',
            composite: false,
            clientRole: true,
            containerId: '22a34c55-3b60-43a7-b142-987623979ca4',
            attributes: {},
          },
          {
            id: 'bc1e570f-ba01-47bc-9fdb-66ccb1d94e64',
            name: 'impersonation',
            description: '${role_impersonation}',
            composite: false,
            clientRole: true,
            containerId: '22a34c55-3b60-43a7-b142-987623979ca4',
            attributes: {},
          },
          {
            id: '6861ad17-d0b0-4f3c-ab42-10b3d50f9e12',
            name: 'query-groups',
            description: '${role_query-groups}',
            composite: false,
            clientRole: true,
            containerId: '22a34c55-3b60-43a7-b142-987623979ca4',
            attributes: {},
          },
          {
            id: '7e876326-821a-45cb-a0bf-cbe81b951f6e',
            name: 'view-users',
            description: '${role_view-users}',
            composite: true,
            composites: {
              client: {
                'master-realm': ['query-users', 'query-groups'],
              },
            },
            clientRole: true,
            containerId: '22a34c55-3b60-43a7-b142-987623979ca4',
            attributes: {},
          },
          {
            id: 'ba2f9bf9-677f-4a95-9d69-0c5d4082e8e8',
            name: 'view-clients',
            description: '${role_view-clients}',
            composite: true,
            composites: {
              client: {
                'master-realm': ['query-clients'],
              },
            },
            clientRole: true,
            containerId: '22a34c55-3b60-43a7-b142-987623979ca4',
            attributes: {},
          },
          {
            id: '924271d9-8c6f-4cea-ac1f-8987e8892d34',
            name: 'view-realm',
            description: '${role_view-realm}',
            composite: false,
            clientRole: true,
            containerId: '22a34c55-3b60-43a7-b142-987623979ca4',
            attributes: {},
          },
          {
            id: 'bfd8b9e7-820c-441c-a0c2-b515d5f53a20',
            name: 'view-authorization',
            description: '${role_view-authorization}',
            composite: false,
            clientRole: true,
            containerId: '22a34c55-3b60-43a7-b142-987623979ca4',
            attributes: {},
          },
          {
            id: '0e220808-78ef-4633-a751-0005bfe94887',
            name: 'manage-identity-providers',
            description: '${role_manage-identity-providers}',
            composite: false,
            clientRole: true,
            containerId: '22a34c55-3b60-43a7-b142-987623979ca4',
            attributes: {},
          },
          {
            id: '22ee4f39-cc92-459f-bed5-ba3af5fbd1f1',
            name: 'query-realms',
            description: '${role_query-realms}',
            composite: false,
            clientRole: true,
            containerId: '22a34c55-3b60-43a7-b142-987623979ca4',
            attributes: {},
          },
          {
            id: '73f66ec1-5415-4203-916a-9c8205d65500',
            name: 'view-identity-providers',
            description: '${role_view-identity-providers}',
            composite: false,
            clientRole: true,
            containerId: '22a34c55-3b60-43a7-b142-987623979ca4',
            attributes: {},
          },
          {
            id: '44189e2f-28ed-41b6-8ad7-487923b83fba',
            name: 'manage-authorization',
            description: '${role_manage-authorization}',
            composite: false,
            clientRole: true,
            containerId: '22a34c55-3b60-43a7-b142-987623979ca4',
            attributes: {},
          },
          {
            id: '765da334-80ab-4c7f-855c-799c7aac860c',
            name: 'manage-clients',
            description: '${role_manage-clients}',
            composite: false,
            clientRole: true,
            containerId: '22a34c55-3b60-43a7-b142-987623979ca4',
            attributes: {},
          },
          {
            id: 'b7ad1cf1-e629-41d8-9d5d-e53ac488d60b',
            name: 'query-users',
            description: '${role_query-users}',
            composite: false,
            clientRole: true,
            containerId: '22a34c55-3b60-43a7-b142-987623979ca4',
            attributes: {},
          },
          {
            id: 'be4add29-cd55-440c-a65f-555327f76128',
            name: 'manage-realm',
            description: '${role_manage-realm}',
            composite: false,
            clientRole: true,
            containerId: '22a34c55-3b60-43a7-b142-987623979ca4',
            attributes: {},
          },
          {
            id: '9186e6f2-d10c-4bce-9dce-14aafe6e36a9',
            name: 'manage-users',
            description: '${role_manage-users}',
            composite: false,
            clientRole: true,
            containerId: '22a34c55-3b60-43a7-b142-987623979ca4',
            attributes: {},
          },
          {
            id: '0ddb0731-d9ae-49f2-b6c5-1e0b677f8d7d',
            name: 'view-events',
            description: '${role_view-events}',
            composite: false,
            clientRole: true,
            containerId: '22a34c55-3b60-43a7-b142-987623979ca4',
            attributes: {},
          },
        ],
        account: [
          {
            id: '7bde6f72-a971-423a-8169-96e05113aabc',
            name: 'manage-account',
            description: '${role_manage-account}',
            composite: true,
            composites: {
              client: {
                account: ['manage-account-links'],
              },
            },
            clientRole: true,
            containerId: '4715458c-3c9f-434a-b7d6-7b965d992290',
            attributes: {},
          },
          {
            id: '50109383-61e2-4160-9d6f-f1988609e065',
            name: 'manage-account-links',
            description: '${role_manage-account-links}',
            composite: false,
            clientRole: true,
            containerId: '4715458c-3c9f-434a-b7d6-7b965d992290',
            attributes: {},
          },
          {
            id: 'dffdd8f7-77c5-4325-be7c-cf46b4e72ec5',
            name: 'view-applications',
            description: '${role_view-applications}',
            composite: false,
            clientRole: true,
            containerId: '4715458c-3c9f-434a-b7d6-7b965d992290',
            attributes: {},
          },
          {
            id: '2a4d02a1-a284-47e0-bf59-9e33309050f0',
            name: 'view-consent',
            description: '${role_view-consent}',
            composite: false,
            clientRole: true,
            containerId: '4715458c-3c9f-434a-b7d6-7b965d992290',
            attributes: {},
          },
          {
            id: '3adae6f5-85e4-4223-b4d1-a15983ff7935',
            name: 'view-groups',
            description: '${role_view-groups}',
            composite: false,
            clientRole: true,
            containerId: '4715458c-3c9f-434a-b7d6-7b965d992290',
            attributes: {},
          },
          {
            id: '38d9a5bc-4dc1-4a34-a92a-ec1e056a3b57',
            name: 'manage-consent',
            description: '${role_manage-consent}',
            composite: true,
            composites: {
              client: {
                account: ['view-consent'],
              },
            },
            clientRole: true,
            containerId: '4715458c-3c9f-434a-b7d6-7b965d992290',
            attributes: {},
          },
          {
            id: '660d7b67-064b-40e2-bf57-bf59fd79436b',
            name: 'view-profile',
            description: '${role_view-profile}',
            composite: false,
            clientRole: true,
            containerId: '4715458c-3c9f-434a-b7d6-7b965d992290',
            attributes: {},
          },
          {
            id: 'aaea8608-e5a7-4811-82d6-97b127436715',
            name: 'delete-account',
            description: '${role_delete-account}',
            composite: false,
            clientRole: true,
            containerId: '4715458c-3c9f-434a-b7d6-7b965d992290',
            attributes: {},
          },
        ],
      },
    },
    defaultRole: {
      id: 'e467e82b-b595-4dd9-91b5-52238f5b042f',
      name: 'default-roles-master',
      description: '${role_default-roles}',
      composite: true,
      clientRole: false,
      containerId: 'fdec0782-8bde-4f05-9d6f-a72c55cac066',
    },
    requiredCredentials: ['password'],
    otpPolicyType: 'totp',
    otpPolicyAlgorithm: 'HmacSHA1',
    otpPolicyInitialCounter: 0,
    otpPolicyDigits: 6,
    otpPolicyLookAheadWindow: 1,
    otpPolicyPeriod: 30,
    otpPolicyCodeReusable: false,
    otpSupportedApplications: [
      'totpAppFreeOTPName',
      'totpAppGoogleName',
      'totpAppMicrosoftAuthenticatorName',
    ],
    localizationTexts: {},
    webAuthnPolicyRpEntityName: 'keycloak',
    webAuthnPolicySignatureAlgorithms: ['ES256'],
    webAuthnPolicyRpId: '',
    webAuthnPolicyAttestationConveyancePreference: 'not specified',
    webAuthnPolicyAuthenticatorAttachment: 'not specified',
    webAuthnPolicyRequireResidentKey: 'not specified',
    webAuthnPolicyUserVerificationRequirement: 'not specified',
    webAuthnPolicyCreateTimeout: 0,
    webAuthnPolicyAvoidSameAuthenticatorRegister: false,
    webAuthnPolicyAcceptableAaguids: [],
    webAuthnPolicyExtraOrigins: [],
    webAuthnPolicyPasswordlessRpEntityName: 'keycloak',
    webAuthnPolicyPasswordlessSignatureAlgorithms: ['ES256'],
    webAuthnPolicyPasswordlessRpId: '',
    webAuthnPolicyPasswordlessAttestationConveyancePreference: 'not specified',
    webAuthnPolicyPasswordlessAuthenticatorAttachment: 'not specified',
    webAuthnPolicyPasswordlessRequireResidentKey: 'not specified',
    webAuthnPolicyPasswordlessUserVerificationRequirement: 'not specified',
    webAuthnPolicyPasswordlessCreateTimeout: 0,
    webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister: false,
    webAuthnPolicyPasswordlessAcceptableAaguids: [],
    webAuthnPolicyPasswordlessExtraOrigins: [],
    scopeMappings: [
      {
        clientScope: 'offline_access',
        roles: ['offline_access'],
      },
    ],
    clientScopeMappings: {
      account: [
        {
          client: 'account-console',
          roles: ['manage-account', 'view-groups'],
        },
      ],
    },
    clients: [
      {
        id: '4715458c-3c9f-434a-b7d6-7b965d992290',
        clientId: 'account',
        name: '${client_account}',
        rootUrl: '${authBaseUrl}',
        baseUrl: '/realms/master/account/',
        surrogateAuthRequired: false,
        enabled: true,
        alwaysDisplayInConsole: false,
        clientAuthenticatorType: 'client-secret',
        redirectUris: ['/realms/master/account/*'],
        webOrigins: [],
        notBefore: 0,
        bearerOnly: false,
        consentRequired: false,
        standardFlowEnabled: true,
        implicitFlowEnabled: false,
        directAccessGrantsEnabled: false,
        serviceAccountsEnabled: false,
        publicClient: true,
        frontchannelLogout: false,
        protocol: 'openid-connect',
        attributes: {
          'post.logout.redirect.uris': '+',
        },
        authenticationFlowBindingOverrides: {},
        fullScopeAllowed: false,
        nodeReRegistrationTimeout: 0,
        defaultClientScopes: [
          'web-origins',
          'acr',
          'profile',
          'roles',
          'email',
        ],
        optionalClientScopes: [
          'address',
          'phone',
          'offline_access',
          'microprofile-jwt',
        ],
      },
      {
        id: 'e45e5a52-be0b-4ead-81ab-d49d92074e2a',
        clientId: 'account-console',
        name: '${client_account-console}',
        rootUrl: '${authBaseUrl}',
        baseUrl: '/realms/master/account/',
        surrogateAuthRequired: false,
        enabled: true,
        alwaysDisplayInConsole: false,
        clientAuthenticatorType: 'client-secret',
        redirectUris: ['/realms/master/account/*'],
        webOrigins: [],
        notBefore: 0,
        bearerOnly: false,
        consentRequired: false,
        standardFlowEnabled: true,
        implicitFlowEnabled: false,
        directAccessGrantsEnabled: false,
        serviceAccountsEnabled: false,
        publicClient: true,
        frontchannelLogout: false,
        protocol: 'openid-connect',
        attributes: {
          'post.logout.redirect.uris': '+',
          'pkce.code.challenge.method': 'S256',
        },
        authenticationFlowBindingOverrides: {},
        fullScopeAllowed: false,
        nodeReRegistrationTimeout: 0,
        protocolMappers: [
          {
            id: 'f5ea1ace-f8e7-4868-b02e-2929ff87ac02',
            name: 'audience resolve',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-audience-resolve-mapper',
            consentRequired: false,
            config: {},
          },
        ],
        defaultClientScopes: [
          'web-origins',
          'acr',
          'profile',
          'roles',
          'email',
        ],
        optionalClientScopes: [
          'address',
          'phone',
          'offline_access',
          'microprofile-jwt',
        ],
      },
      {
        id: '2f3997b9-25c9-4d2e-b3a6-c37115530eac',
        clientId: 'admin-cli',
        name: '${client_admin-cli}',
        surrogateAuthRequired: false,
        enabled: true,
        alwaysDisplayInConsole: false,
        clientAuthenticatorType: 'client-secret',
        redirectUris: [],
        webOrigins: [],
        notBefore: 0,
        bearerOnly: false,
        consentRequired: false,
        standardFlowEnabled: false,
        implicitFlowEnabled: false,
        directAccessGrantsEnabled: true,
        serviceAccountsEnabled: false,
        publicClient: true,
        frontchannelLogout: false,
        protocol: 'openid-connect',
        attributes: {},
        authenticationFlowBindingOverrides: {},
        fullScopeAllowed: false,
        nodeReRegistrationTimeout: 0,
        defaultClientScopes: [
          'web-origins',
          'acr',
          'profile',
          'roles',
          'email',
        ],
        optionalClientScopes: [
          'address',
          'phone',
          'offline_access',
          'microprofile-jwt',
        ],
      },
      {
        id: 'd27c108f-ab4b-4647-ab02-0658c15026e5',
        clientId: 'broker',
        name: '${client_broker}',
        surrogateAuthRequired: false,
        enabled: true,
        alwaysDisplayInConsole: false,
        clientAuthenticatorType: 'client-secret',
        redirectUris: [],
        webOrigins: [],
        notBefore: 0,
        bearerOnly: true,
        consentRequired: false,
        standardFlowEnabled: true,
        implicitFlowEnabled: false,
        directAccessGrantsEnabled: false,
        serviceAccountsEnabled: false,
        publicClient: false,
        frontchannelLogout: false,
        protocol: 'openid-connect',
        attributes: {},
        authenticationFlowBindingOverrides: {},
        fullScopeAllowed: false,
        nodeReRegistrationTimeout: 0,
        defaultClientScopes: [
          'web-origins',
          'acr',
          'profile',
          'roles',
          'email',
        ],
        optionalClientScopes: [
          'address',
          'phone',
          'offline_access',
          'microprofile-jwt',
        ],
      },
      {
        id: '22a34c55-3b60-43a7-b142-987623979ca4',
        clientId: 'master-realm',
        name: 'master Realm',
        surrogateAuthRequired: false,
        enabled: true,
        alwaysDisplayInConsole: false,
        clientAuthenticatorType: 'client-secret',
        redirectUris: [],
        webOrigins: [],
        notBefore: 0,
        bearerOnly: true,
        consentRequired: false,
        standardFlowEnabled: true,
        implicitFlowEnabled: false,
        directAccessGrantsEnabled: false,
        serviceAccountsEnabled: false,
        publicClient: false,
        frontchannelLogout: false,
        attributes: {},
        authenticationFlowBindingOverrides: {},
        fullScopeAllowed: false,
        nodeReRegistrationTimeout: 0,
        defaultClientScopes: [
          'web-origins',
          'acr',
          'profile',
          'roles',
          'email',
        ],
        optionalClientScopes: [
          'address',
          'phone',
          'offline_access',
          'microprofile-jwt',
        ],
      },
      {
        id: '253fa8ea-917f-4ba0-b7f4-ccdf73e61ce3',
        clientId: 'rest-api-client',
        name: '',
        description: '',
        rootUrl: '',
        adminUrl: '',
        baseUrl: '',
        surrogateAuthRequired: false,
        enabled: true,
        alwaysDisplayInConsole: false,
        clientAuthenticatorType: 'client-secret',
        secret: 'WbHA4PoWbZ4MfFcO7MV9gRGQ8Ha8SSmd',
        redirectUris: ['/*'],
        webOrigins: ['*'],
        notBefore: 0,
        bearerOnly: false,
        consentRequired: false,
        standardFlowEnabled: true,
        implicitFlowEnabled: false,
        directAccessGrantsEnabled: true,
        serviceAccountsEnabled: true,
        publicClient: false,
        frontchannelLogout: true,
        protocol: 'openid-connect',
        attributes: {
          'oidc.ciba.grant.enabled': 'false',
          'client.secret.creation.time': '1711706808',
          'backchannel.logout.session.required': 'true',
          'oauth2.device.authorization.grant.enabled': 'false',
          'display.on.consent.screen': 'false',
          'backchannel.logout.revoke.offline.tokens': 'false',
        },
        authenticationFlowBindingOverrides: {},
        fullScopeAllowed: true,
        nodeReRegistrationTimeout: -1,
        protocolMappers: [
          {
            id: '7d16b086-cfe4-44ee-8dee-41c4330ca090',
            name: 'Client Host',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usersessionmodel-note-mapper',
            consentRequired: false,
            config: {
              'user.session.note': 'clientHost',
              'introspection.token.claim': 'true',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'clientHost',
              'jsonType.label': 'String',
            },
          },
          {
            id: '06e50599-8908-4040-9716-f982875f8fed',
            name: 'Client IP Address',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usersessionmodel-note-mapper',
            consentRequired: false,
            config: {
              'user.session.note': 'clientAddress',
              'introspection.token.claim': 'true',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'clientAddress',
              'jsonType.label': 'String',
            },
          },
          {
            id: 'dd5e40ea-066f-42e6-8e79-a0b2618c05e5',
            name: 'Client ID',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usersessionmodel-note-mapper',
            consentRequired: false,
            config: {
              'user.session.note': 'client_id',
              'introspection.token.claim': 'true',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'client_id',
              'jsonType.label': 'String',
            },
          },
        ],
        defaultClientScopes: [
          'web-origins',
          'acr',
          'profile',
          'roles',
          'email',
        ],
        optionalClientScopes: [
          'address',
          'phone',
          'offline_access',
          'microprofile-jwt',
        ],
      },
      {
        id: 'd09f3405-79c1-4dd2-8521-7e88559f29ec',
        clientId: 'security-admin-console',
        name: '${client_security-admin-console}',
        rootUrl: '${authAdminUrl}',
        baseUrl: '/admin/master/console/',
        surrogateAuthRequired: false,
        enabled: true,
        alwaysDisplayInConsole: false,
        clientAuthenticatorType: 'client-secret',
        redirectUris: ['/admin/master/console/*'],
        webOrigins: ['+'],
        notBefore: 0,
        bearerOnly: false,
        consentRequired: false,
        standardFlowEnabled: true,
        implicitFlowEnabled: false,
        directAccessGrantsEnabled: false,
        serviceAccountsEnabled: false,
        publicClient: true,
        frontchannelLogout: false,
        protocol: 'openid-connect',
        attributes: {
          'post.logout.redirect.uris': '+',
          'pkce.code.challenge.method': 'S256',
        },
        authenticationFlowBindingOverrides: {},
        fullScopeAllowed: false,
        nodeReRegistrationTimeout: 0,
        protocolMappers: [
          {
            id: '1333e127-de75-432b-aab0-122cc9b11a77',
            name: 'locale',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-attribute-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'userinfo.token.claim': 'true',
              'user.attribute': 'locale',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'locale',
              'jsonType.label': 'String',
            },
          },
        ],
        defaultClientScopes: [
          'web-origins',
          'acr',
          'profile',
          'roles',
          'email',
        ],
        optionalClientScopes: [
          'address',
          'phone',
          'offline_access',
          'microprofile-jwt',
        ],
      },
    ],
    clientScopes: [
      {
        id: 'd2e7e45c-e4d8-42f0-9236-d6151c514498',
        name: 'offline_access',
        description: 'OpenID Connect built-in scope: offline_access',
        protocol: 'openid-connect',
        attributes: {
          'consent.screen.text': '${offlineAccessScopeConsentText}',
          'display.on.consent.screen': 'true',
        },
      },
      {
        id: '8e233b5a-c9fc-40b2-a31a-285a8f8af530',
        name: 'microprofile-jwt',
        description: 'Microprofile - JWT built-in scope',
        protocol: 'openid-connect',
        attributes: {
          'include.in.token.scope': 'true',
          'display.on.consent.screen': 'false',
        },
        protocolMappers: [
          {
            id: '0cd7c121-3239-48a2-9313-b6238ee1e90d',
            name: 'upn',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-attribute-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'userinfo.token.claim': 'true',
              'user.attribute': 'username',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'upn',
              'jsonType.label': 'String',
            },
          },
          {
            id: 'f2fa9581-f817-4d01-a87c-b636e469982a',
            name: 'groups',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-realm-role-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              multivalued: 'true',
              'user.attribute': 'foo',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'groups',
              'jsonType.label': 'String',
            },
          },
        ],
      },
      {
        id: 'bc205c8a-4b5b-47bd-a21f-be5568b266c2',
        name: 'address',
        description: 'OpenID Connect built-in scope: address',
        protocol: 'openid-connect',
        attributes: {
          'include.in.token.scope': 'true',
          'display.on.consent.screen': 'true',
          'consent.screen.text': '${addressScopeConsentText}',
        },
        protocolMappers: [
          {
            id: '78b74309-10fb-442b-acb2-7c8245d05e62',
            name: 'address',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-address-mapper',
            consentRequired: false,
            config: {
              'user.attribute.formatted': 'formatted',
              'user.attribute.country': 'country',
              'introspection.token.claim': 'true',
              'user.attribute.postal_code': 'postal_code',
              'userinfo.token.claim': 'true',
              'user.attribute.street': 'street',
              'id.token.claim': 'true',
              'user.attribute.region': 'region',
              'access.token.claim': 'true',
              'user.attribute.locality': 'locality',
            },
          },
        ],
      },
      {
        id: '45afc307-0ffb-4163-a596-6c0473edab99',
        name: 'acr',
        description:
          'OpenID Connect scope for add acr (authentication context class reference) to the token',
        protocol: 'openid-connect',
        attributes: {
          'include.in.token.scope': 'false',
          'display.on.consent.screen': 'false',
        },
        protocolMappers: [
          {
            id: '4b872af0-14f7-42fc-b598-82469dba7911',
            name: 'acr loa level',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-acr-mapper',
            consentRequired: false,
            config: {
              'id.token.claim': 'true',
              'introspection.token.claim': 'true',
              'access.token.claim': 'true',
            },
          },
        ],
      },
      {
        id: '0fc2a3e1-6f38-4ff4-a513-ce86a0b9f115',
        name: 'phone',
        description: 'OpenID Connect built-in scope: phone',
        protocol: 'openid-connect',
        attributes: {
          'include.in.token.scope': 'true',
          'display.on.consent.screen': 'true',
          'consent.screen.text': '${phoneScopeConsentText}',
        },
        protocolMappers: [
          {
            id: 'c3b569e3-2b25-4b27-8840-af2f7dcb5bcf',
            name: 'phone number verified',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-attribute-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'userinfo.token.claim': 'true',
              'user.attribute': 'phoneNumberVerified',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'phone_number_verified',
              'jsonType.label': 'boolean',
            },
          },
          {
            id: 'c70fbd5a-7ce7-4e30-8969-e108b6f23757',
            name: 'phone number',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-attribute-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'userinfo.token.claim': 'true',
              'user.attribute': 'phoneNumber',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'phone_number',
              'jsonType.label': 'String',
            },
          },
        ],
      },
      {
        id: 'e0608eb5-aced-4283-bea3-08e7ca7db1ab',
        name: 'profile',
        description: 'OpenID Connect built-in scope: profile',
        protocol: 'openid-connect',
        attributes: {
          'include.in.token.scope': 'true',
          'display.on.consent.screen': 'true',
          'consent.screen.text': '${profileScopeConsentText}',
        },
        protocolMappers: [
          {
            id: 'd45b3660-a3ca-4642-868f-45184204c9b2',
            name: 'locale',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-attribute-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'userinfo.token.claim': 'true',
              'user.attribute': 'locale',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'locale',
              'jsonType.label': 'String',
            },
          },
          {
            id: 'fdf79899-6e30-43c2-bf56-834a33381485',
            name: 'full name',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-full-name-mapper',
            consentRequired: false,
            config: {
              'id.token.claim': 'true',
              'introspection.token.claim': 'true',
              'access.token.claim': 'true',
              'userinfo.token.claim': 'true',
            },
          },
          {
            id: '4187beca-f281-4b49-a9ae-a51a88eec7a0',
            name: 'username',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-attribute-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'userinfo.token.claim': 'true',
              'user.attribute': 'username',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'preferred_username',
              'jsonType.label': 'String',
            },
          },
          {
            id: 'b22eb825-bef6-4df6-8f59-b1b93b98ccc4',
            name: 'zoneinfo',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-attribute-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'userinfo.token.claim': 'true',
              'user.attribute': 'zoneinfo',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'zoneinfo',
              'jsonType.label': 'String',
            },
          },
          {
            id: 'a3189f2b-44a2-4793-bfc8-69038544fd1b',
            name: 'middle name',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-attribute-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'userinfo.token.claim': 'true',
              'user.attribute': 'middleName',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'middle_name',
              'jsonType.label': 'String',
            },
          },
          {
            id: '9fe7671e-cd9f-4bd9-9f56-73000e48a01f',
            name: 'profile',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-attribute-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'userinfo.token.claim': 'true',
              'user.attribute': 'profile',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'profile',
              'jsonType.label': 'String',
            },
          },
          {
            id: '6c4a71bd-9436-4227-8db3-286a098b512f',
            name: 'gender',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-attribute-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'userinfo.token.claim': 'true',
              'user.attribute': 'gender',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'gender',
              'jsonType.label': 'String',
            },
          },
          {
            id: '97a087dd-edd4-4921-9f91-4dae4c444b54',
            name: 'birthdate',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-attribute-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'userinfo.token.claim': 'true',
              'user.attribute': 'birthdate',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'birthdate',
              'jsonType.label': 'String',
            },
          },
          {
            id: 'cfbe31df-be9c-4a0f-8272-ee540598f28e',
            name: 'picture',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-attribute-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'userinfo.token.claim': 'true',
              'user.attribute': 'picture',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'picture',
              'jsonType.label': 'String',
            },
          },
          {
            id: '56f93bca-3086-40bd-ad30-4d663f9bf248',
            name: 'updated at',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-attribute-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'userinfo.token.claim': 'true',
              'user.attribute': 'updatedAt',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'updated_at',
              'jsonType.label': 'long',
            },
          },
          {
            id: '810758ab-07da-4a12-b7aa-e7ac91b95037',
            name: 'nickname',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-attribute-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'userinfo.token.claim': 'true',
              'user.attribute': 'nickname',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'nickname',
              'jsonType.label': 'String',
            },
          },
          {
            id: '1ae2e662-4024-4a08-abe3-0cea17b2db6a',
            name: 'family name',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-attribute-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'userinfo.token.claim': 'true',
              'user.attribute': 'lastName',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'family_name',
              'jsonType.label': 'String',
            },
          },
          {
            id: '67bfc11b-edab-4bc7-aaab-aee5db2a23b6',
            name: 'given name',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-attribute-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'userinfo.token.claim': 'true',
              'user.attribute': 'firstName',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'given_name',
              'jsonType.label': 'String',
            },
          },
          {
            id: '4093d069-5658-4a56-94f9-4f5d3c6bdf0b',
            name: 'website',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-attribute-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'userinfo.token.claim': 'true',
              'user.attribute': 'website',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'website',
              'jsonType.label': 'String',
            },
          },
        ],
      },
      {
        id: '7f46ee5d-4249-4fdc-8882-ce5963243136',
        name: 'email',
        description: 'OpenID Connect built-in scope: email',
        protocol: 'openid-connect',
        attributes: {
          'include.in.token.scope': 'true',
          'display.on.consent.screen': 'true',
          'consent.screen.text': '${emailScopeConsentText}',
        },
        protocolMappers: [
          {
            id: '8f5544d2-82f6-48a2-8b7f-e535c8504993',
            name: 'email',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-attribute-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'userinfo.token.claim': 'true',
              'user.attribute': 'email',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'email',
              'jsonType.label': 'String',
            },
          },
          {
            id: 'ec622c22-60c9-45bf-9574-8f1d84ad7703',
            name: 'email verified',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-property-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'userinfo.token.claim': 'true',
              'user.attribute': 'emailVerified',
              'id.token.claim': 'true',
              'access.token.claim': 'true',
              'claim.name': 'email_verified',
              'jsonType.label': 'boolean',
            },
          },
        ],
      },
      {
        id: '25a85f9a-cca1-450e-9a05-83261ae758ba',
        name: 'web-origins',
        description:
          'OpenID Connect scope for add allowed web origins to the access token',
        protocol: 'openid-connect',
        attributes: {
          'include.in.token.scope': 'false',
          'display.on.consent.screen': 'false',
          'consent.screen.text': '',
        },
        protocolMappers: [
          {
            id: 'b1751c43-c363-4ed5-864e-d3971eed65d0',
            name: 'allowed web origins',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-allowed-origins-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'access.token.claim': 'true',
            },
          },
        ],
      },
      {
        id: '4aaa40b5-0486-4d99-a6a7-253712569b10',
        name: 'roles',
        description:
          'OpenID Connect scope for add user roles to the access token',
        protocol: 'openid-connect',
        attributes: {
          'include.in.token.scope': 'false',
          'display.on.consent.screen': 'true',
          'consent.screen.text': '${rolesScopeConsentText}',
        },
        protocolMappers: [
          {
            id: 'fba1e4a6-2d1e-4120-9bd3-1ff09acf0ad7',
            name: 'realm roles',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-realm-role-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              multivalued: 'true',
              'user.attribute': 'foo',
              'access.token.claim': 'true',
              'claim.name': 'realm_access.roles',
              'jsonType.label': 'String',
            },
          },
          {
            id: 'a5bb7117-53bd-433f-b896-0011894770f9',
            name: 'audience resolve',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-audience-resolve-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              'access.token.claim': 'true',
            },
          },
          {
            id: '83072ef1-f4e5-4e67-8c6e-9ba49aaa73fe',
            name: 'client roles',
            protocol: 'openid-connect',
            protocolMapper: 'oidc-usermodel-client-role-mapper',
            consentRequired: false,
            config: {
              'introspection.token.claim': 'true',
              multivalued: 'true',
              'user.attribute': 'foo',
              'access.token.claim': 'true',
              'claim.name': 'resource_access.${client_id}.roles',
              'jsonType.label': 'String',
            },
          },
        ],
      },
      {
        id: 'af56111f-3945-4ac7-a3ac-e79a6abedbfa',
        name: 'role_list',
        description: 'SAML role list',
        protocol: 'saml',
        attributes: {
          'consent.screen.text': '${samlRoleListScopeConsentText}',
          'display.on.consent.screen': 'true',
        },
        protocolMappers: [
          {
            id: '79de5720-80c2-42a5-aac7-1d64f54f4890',
            name: 'role list',
            protocol: 'saml',
            protocolMapper: 'saml-role-list-mapper',
            consentRequired: false,
            config: {
              single: 'false',
              'attribute.nameformat': 'Basic',
              'attribute.name': 'Role',
            },
          },
        ],
      },
    ],
    defaultDefaultClientScopes: [
      'role_list',
      'profile',
      'email',
      'roles',
      'web-origins',
      'acr',
    ],
    defaultOptionalClientScopes: [
      'offline_access',
      'address',
      'phone',
      'microprofile-jwt',
    ],
    browserSecurityHeaders: {
      contentSecurityPolicyReportOnly: '',
      xContentTypeOptions: 'nosniff',
      referrerPolicy: 'no-referrer',
      xRobotsTag: 'none',
      xFrameOptions: 'SAMEORIGIN',
      contentSecurityPolicy:
        "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
      xXSSProtection: '1; mode=block',
      strictTransportSecurity: 'max-age=31536000; includeSubDomains',
    },
    smtpServer: {},
    eventsEnabled: false,
    eventsListeners: ['jboss-logging'],
    enabledEventTypes: [],
    adminEventsEnabled: false,
    adminEventsDetailsEnabled: false,
    identityProviders: [],
    identityProviderMappers: [],
    components: {
      'org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy':
        [
          {
            id: '2628c7ac-5f62-4c9a-b0d5-178dbb26e22b',
            name: 'Allowed Client Scopes',
            providerId: 'allowed-client-templates',
            subType: 'anonymous',
            subComponents: {},
            config: {
              'allow-default-scopes': ['true'],
            },
          },
          {
            id: '51cc1aaf-9a87-4b7b-b8a4-31f3634d4f31',
            name: 'Consent Required',
            providerId: 'consent-required',
            subType: 'anonymous',
            subComponents: {},
            config: {},
          },
          {
            id: '5cadac43-4b77-4f09-b9b0-d68ebb1d96eb',
            name: 'Full Scope Disabled',
            providerId: 'scope',
            subType: 'anonymous',
            subComponents: {},
            config: {},
          },
          {
            id: '26532e43-61c7-4790-8a89-3b34fcafd797',
            name: 'Allowed Protocol Mapper Types',
            providerId: 'allowed-protocol-mappers',
            subType: 'anonymous',
            subComponents: {},
            config: {
              'allowed-protocol-mapper-types': [
                'oidc-usermodel-property-mapper',
                'saml-user-property-mapper',
                'oidc-full-name-mapper',
                'saml-user-attribute-mapper',
                'oidc-sha256-pairwise-sub-mapper',
                'oidc-address-mapper',
                'saml-role-list-mapper',
                'oidc-usermodel-attribute-mapper',
              ],
            },
          },
          {
            id: 'c563a2ca-a736-4084-996f-ceecbd4a6daa',
            name: 'Trusted Hosts',
            providerId: 'trusted-hosts',
            subType: 'anonymous',
            subComponents: {},
            config: {
              'host-sending-registration-request-must-match': ['true'],
              'client-uris-must-match': ['true'],
            },
          },
          {
            id: '01ffed9d-cb1a-4227-af38-81886249cdea',
            name: 'Allowed Protocol Mapper Types',
            providerId: 'allowed-protocol-mappers',
            subType: 'authenticated',
            subComponents: {},
            config: {
              'allowed-protocol-mapper-types': [
                'saml-user-property-mapper',
                'oidc-usermodel-attribute-mapper',
                'saml-role-list-mapper',
                'oidc-address-mapper',
                'oidc-sha256-pairwise-sub-mapper',
                'oidc-full-name-mapper',
                'saml-user-attribute-mapper',
                'oidc-usermodel-property-mapper',
              ],
            },
          },
          {
            id: '4dd89e22-ef65-4428-bc28-7855fa94fba3',
            name: 'Max Clients Limit',
            providerId: 'max-clients',
            subType: 'anonymous',
            subComponents: {},
            config: {
              'max-clients': ['200'],
            },
          },
          {
            id: 'd87b3b9f-064b-4737-8d52-d0851d12a85a',
            name: 'Allowed Client Scopes',
            providerId: 'allowed-client-templates',
            subType: 'authenticated',
            subComponents: {},
            config: {
              'allow-default-scopes': ['true'],
            },
          },
        ],
      'org.keycloak.userprofile.UserProfileProvider': [
        {
          id: '5988e1e0-ca96-4324-9d83-cb857a98f571',
          providerId: 'declarative-user-profile',
          subComponents: {},
          config: {
            'kc.user.profile.config': [
              '{"attributes":[{"name":"username","displayName":"${username}","validations":{"length":{"min":3,"max":255},"username-prohibited-characters":{},"up-username-not-idn-homograph":{}},"permissions":{"view":["admin","user"],"edit":["admin","user"]},"multivalued":false},{"name":"email","displayName":"${email}","validations":{"email":{},"length":{"max":255}},"permissions":{"view":["admin","user"],"edit":["admin","user"]},"multivalued":false},{"name":"firstName","displayName":"${firstName}","validations":{"length":{"max":255},"person-name-prohibited-characters":{}},"permissions":{"view":["admin","user"],"edit":["admin","user"]},"multivalued":false},{"name":"lastName","displayName":"${lastName}","validations":{"length":{"max":255},"person-name-prohibited-characters":{}},"permissions":{"view":["admin","user"],"edit":["admin","user"]},"multivalued":false}],"groups":[{"name":"user-metadata","displayHeader":"User metadata","displayDescription":"Attributes, which refer to user metadata"}]}',
            ],
          },
        },
      ],
      'org.keycloak.keys.KeyProvider': [
        {
          id: 'e57a39dc-0f26-4c22-a8ee-3274ee14844d',
          name: 'hmac-generated-hs512',
          providerId: 'hmac-generated',
          subComponents: {},
          config: {
            kid: ['401a74bb-6081-4e96-9d8b-ffe687719963'],
            secret: [
              'GXkeMUoYHhvm_S54J26rj-UJWjkECF4y8ybbCaY3r2qci3g_-lpucXNOZaQdc0ou02USqRv5LO1_WhwTmzDZHcmYix0E0iXBwTNk9ewx9oC63MoDratozpOSySbEOHvps6BgPiRO4u6CUw7uEWXyA-TUFnkwd9NBtjmk-fIwwZM',
            ],
            priority: ['100'],
            algorithm: ['HS512'],
          },
        },
        {
          id: 'aded370f-a203-470d-bde0-08cec00bcd61',
          name: 'rsa-generated',
          providerId: 'rsa-generated',
          subComponents: {},
          config: {
            privateKey: [
              'MIIEogIBAAKCAQEAzHO3nVHUYUd2cgqCzZInu0e+uK8PUAv5kJXzXK8tpF/mYjA+Voo4kTUGmq6F2N+ijF+0kTQJWJ74HD5EiFj1O0ct7MC1wob+T57F56yZy/SMXo6o57/hoHqZvQl+ZSBgP3qLlTMldYzI3+uUqy2VnYW1mWWEM+8Bw5Ri2V5fHf/TxBlK2yRJ0h593ckzepPl2FCZSYjwmb2D3y02yWp/uBbUFjrS8ixQ3PqTA3ZdPlNt0168BQ8QyQdZPD1JIXReCOuldaAuZWf38uUoxctRj1qeCZWGFrZTS1bOCvWjVUF//5RX4Hc2AhltCMlTdoN8vofarvZppsEZxpz/yBoplQIDAQABAoIBAAsJWRlVND9/FdIApsB1mg72R8Gc85jo2JM5QP6ZFz/nDF7zBz5xLi4KfH2Hm8KSCeqFdRAcjL+brz2JD/aDRNOrGzvLSFSEqIBATCMeMlwr6pLlJRGDjmi1DY0CkO/hEEkE8rl+XhCLJcHOrAMUjh3HfL7X18vc5E28OhzNRxmtn7vCaR1d2eVnrrfJJOnjlDV5dsbajkvvs1T8G5VxrP4PfF1J/feJhnt6qffTnVAvxrf0JEOUfGHt82xQ9E0RajU4jVuK/Sk2TKNJ51xvRZZjg28AmR+ifD+IhT8QP1ph4Mlj1otVxZPRofQOUJjr+sErOj+Q4vIRo8+z1cy1deECgYEA5pDa/FHGe069Dw12RPHI2zQdLcAOtwcJzcSBW5/bZo/n5s7oSvE0ppZT4TDGouhCw3FLdqrbAz5DhjHMBKgeTlNKcu4PJW25Cw2vUrdR6NHe+9MF6s+akS+fGCYJCGkX4BgKxTJwWoynTrFZD7XsgaeDdQPkMCPfC9RyjSbMVaECgYEA4wFpVdfdLoBfMuZnimaHs4gFc6eg5EbGpp+RtdHRo9vJzk5C7840ruzI2n3IA2/D7p9N0H06CykD8rdX13n9amNH0vx6pGfLKFWtL+NWL2ZCyarmNxfiVD4khfdXRfpPkQO7SmnWq5Whv9vcQSFQipeEFigtDVr4D7GuKkz7p3UCgYBUSWQklWhvr2sh05QGxDTfHYAFN46pjiMhW9LGQfwc1EK8d6snqmHK/G2Rhxk2eJ3fgM1Lhk4mM17P8ehZU3QwwfYXabuTvTbGOax8GpQQ/pf7iztAicBBjx0j4NOwhWq6+08Eo9m64GxRMjgSrDjXdPtzjYafqp1hX7q4qxRLwQKBgCRc24S2uWVzhsxegAN5fQ9TIJxwI6OterDCKtMXMx+uW1tCyhIj0+iZYWsubtWuF5Knzg0xohSbk1hT6ixIDEH4eU7gxryDK9XgM4fSQMIC/XvUdmAo4UZhVfRntIEvIYO3N08qOQrvQyO6kkOUlJQ+xRfPg7f59HZ/HckE3+LpAoGAFIcpOPfLIeQRXo3uPIoTo0LS1JMHoiIPVYM2UsoQrV+uXksPnlu4lWOWB/uXByVlaUoU90UZxObLsNJhMQqR3XoAbbwcjo2bRA3VTtcuV4s5rx5meXa1Yyz5PqESdITTARgx+BFXkQ/g8wj0kPh9jUXpIURYf/OKIFx9TJf7eOs=',
            ],
            keyUse: ['SIG'],
            certificate: [
              'MIICmzCCAYMCBgGOiaVoyDANBgkqhkiG9w0BAQsFADARMQ8wDQYDVQQDDAZtYXN0ZXIwHhcNMjQwMzI5MDk1NjQyWhcNMzQwMzI5MDk1ODIyWjARMQ8wDQYDVQQDDAZtYXN0ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDMc7edUdRhR3ZyCoLNkie7R764rw9QC/mQlfNcry2kX+ZiMD5WijiRNQaaroXY36KMX7SRNAlYnvgcPkSIWPU7Ry3swLXChv5PnsXnrJnL9Ixejqjnv+Ggepm9CX5lIGA/eouVMyV1jMjf65SrLZWdhbWZZYQz7wHDlGLZXl8d/9PEGUrbJEnSHn3dyTN6k+XYUJlJiPCZvYPfLTbJan+4FtQWOtLyLFDc+pMDdl0+U23TXrwFDxDJB1k8PUkhdF4I66V1oC5lZ/fy5SjFy1GPWp4JlYYWtlNLVs4K9aNVQX//lFfgdzYCGW0IyVN2g3y+h9qu9mmmwRnGnP/IGimVAgMBAAEwDQYJKoZIhvcNAQELBQADggEBAIAa8xgmy3NqYuLJiPNUlcYUGk2sBYPq2dLO2VKZwD6LHuCSXzDBGlF0s3HEe8FSyoUCW2JGy6nCqGuFQ5zmdhCFZrkXrpN23fJT2beAf9cU9TuG2/ugElkGVMgTnuCPR8QEuJ2NKvWDF2Bf5X90b+TRKIJ05qyT+cWR0lTLlMicgPl4LMPZToL1d1pMnBC4xwC6clszosKqbmO0Y4VvYk5SRoLj561SuweUWU/knNxnOSUS352SFpWm8mAo0oXzvr2cyUYkkI27R83fjvqVSGDuQXv0tPyDl3k54pxuyEog3pqi87Ix92jrQ8Chc0E/PwLuI2hp1jqJkX1ycFEHDTs=',
            ],
            priority: ['100'],
          },
        },
        {
          id: '6f0831c2-278c-4fef-8473-e8fb658a4fc0',
          name: 'rsa-enc-generated',
          providerId: 'rsa-enc-generated',
          subComponents: {},
          config: {
            privateKey: [
              'MIIEowIBAAKCAQEAtZ+pWlLXhdT7jq3edB6TO1tfZSoyUvOTqrEQRrSKAaWauzmDEExv6HLzLrhg7/WIS5ZmhZZt5gir9XwmYyBPD8jk3eZ8GCc9WSH72+XR+20p59u8Oc7Bn7KvRKtAPD8hm4egcSsAV62ZIU70vmAf2Gz2zXute5ay1m7jaVfH6BoudXEt8SYZXRQH/eoAtd32lTkja8t77Vtb+vP2apyxB+5D275mhf2LvVsxTfpXDJ5ryHF+cBUey3d0EJxWvVW43Jv79+59C6SWGcgC0kmftVp2RSyzHwN+OcCjd+DUVNVhqW0VUUE4+Xmk4kRtsSD1DhDZL7Sj0TxX3sA6IhBD0wIDAQABAoIBACqeu+wBMqgqMZnqvR/8qMouB/XCcCq9E/LjOBGPfi8iwGuc9F+XwE8I4n4dMEo/EOvD8Gz6vvFTKZ8ishNi2oq2ttZHpuk4FBJdgi+4/4yDsmjBTKs4FIG4OZ7gnONGYUmRCxpjX+IzT5LcZ1xhTDfKYiQYGL6+v1rIjL8EpVmWnXoEVkGdvuI5hGjgZ2r4H9gLrU7l1kTDjiXLaUOw5ituGG+AFBO445St7Cj3Vs1rT1AMEMY+y8BllRS+YR+49lsp6xE/8qGCBkI5JjgFovnysrmoQccoZsyVIN32zGVIbA38eyqBcd9Y8RcdV904PhSbQ53yQPxF1C5p1MGjaVkCgYEA76xM56pJUSZMEa2XWseOqp2d7n8nOEq83CVBjIBbQ7E2a16EhTIgVlQc1kJZ/4dA3fW8KGKNhIOZh3ixsGt8L9xCOvaRAHpbAPMHPDWIqRbxT0m8jte6ptNuOVOHc2299bMfY0TEuO+6iGu0RYN8eSIIwTn5arsZvjmUS7FxNE8CgYEAwf8HNLdKPQUegt3eFmK07JUWDIPJHafQziYST5AH95h3OlMrZ7b1cLYsYWw3F7Q0pHSvXPjyFnDLRctYZkOQ4+/RBOskdYkJZjSP/tcEdpWG9EW2kGNHvlS6ba+h5kULg6BEhV71HH98wKz9EpQ2v4Yzq1c6xDBfWc2wHXUQIz0CgYEAmWkDTOIdzdiipkoj8FJ9yk3bUlaHZyvHmW4rd+CNClY7TByS3KMKOdfbIXYVH0+WwLxTNNJoXSLTOfiSXCdgtU3aAt3iUJkA+SmWPv7RO9JYoXTEQfZqHfCFxCHoOIVNKyD9fU/+T5X7Iuk12azhFrQnQG94a83ZG37FonGw0VcCgYBx94XfNVKauHgtP3RqSECrwAX9AirTjjP/96PINABKN7rLe/LC8lwMhClcbnuLJGXMu3QONX3bKxZwAT8EjOsAzXFI52860W/BKF3zw5Ouqrdmp9HRz1FlglcnewesxKE4CZ5Xj+qFfGvosXfXQ1VKfOe73/n5KcXKdyjglVYOrQKBgHBesGKejmeSX4KHayRMCagi/a31s3SakBejbugsElAyA5heVd90b8MH3IiIuJvunDqOzegMVkA8So+b9cg6pAxidTBI08X2Gex2mZHzLopyTnzGHXx7n63MEl+t+v6oZw2VeZf10rEBKgmneUIaC4+n/V5pqgtkW6fCdYHLKjhP',
            ],
            keyUse: ['ENC'],
            certificate: [
              'MIICmzCCAYMCBgGOiaVpbjANBgkqhkiG9w0BAQsFADARMQ8wDQYDVQQDDAZtYXN0ZXIwHhcNMjQwMzI5MDk1NjQyWhcNMzQwMzI5MDk1ODIyWjARMQ8wDQYDVQQDDAZtYXN0ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC1n6laUteF1PuOrd50HpM7W19lKjJS85OqsRBGtIoBpZq7OYMQTG/ocvMuuGDv9YhLlmaFlm3mCKv1fCZjIE8PyOTd5nwYJz1ZIfvb5dH7bSnn27w5zsGfsq9Eq0A8PyGbh6BxKwBXrZkhTvS+YB/YbPbNe617lrLWbuNpV8foGi51cS3xJhldFAf96gC13faVOSNry3vtW1v68/ZqnLEH7kPbvmaF/Yu9WzFN+lcMnmvIcX5wFR7Ld3QQnFa9Vbjcm/v37n0LpJYZyALSSZ+1WnZFLLMfA345wKN34NRU1WGpbRVRQTj5eaTiRG2xIPUOENkvtKPRPFfewDoiEEPTAgMBAAEwDQYJKoZIhvcNAQELBQADggEBABSL2i+0epvtwcphtYBzeJDUGV1yWgcqNnWt82q0bLdx8XyCYHaDaY4fp5EWSJK6MSmQiGQ7E1JyAwukwqTSjmn3XsaYOe+kmuNYBILAXTpWDUw0OqhCWOjv/IqTor6VqjXWm+KapNdznmntpfc83N+/TtNy+sOpd9WbAOfgqpHohckZ6gTL0e7D/CUFWDj5f0TWQMON9B3CJtPJTz++ubdG+NpxfxhQfjkLn/Xatp618lXl817cbgxOMKLaNADoFbbN3BwjoM0diUC/ZGv0UJFh9COLit6nrdwIckGxqFv59NJ7ic6KPTFCX0Mmfnz5y72u5JiUWpFTiVKba7N/VCM=',
            ],
            priority: ['100'],
            algorithm: ['RSA-OAEP'],
          },
        },
        {
          id: 'edf28961-93cb-4314-aec5-6d6a7c52bbdf',
          name: 'aes-generated',
          providerId: 'aes-generated',
          subComponents: {},
          config: {
            kid: ['ea83f057-c65a-4054-8d26-1c6854bdd3c1'],
            secret: ['G6a0OGtH62YNFzUn6r3DYA'],
            priority: ['100'],
          },
        },
      ],
    },
    internationalizationEnabled: false,
    supportedLocales: [],
    authenticationFlows: [
      {
        id: 'e18cb2c3-aa2e-4256-b364-2a7092813f34',
        alias: 'Account verification options',
        description: 'Method with which to verity the existing account',
        providerId: 'basic-flow',
        topLevel: false,
        builtIn: true,
        authenticationExecutions: [
          {
            authenticator: 'idp-email-verification',
            authenticatorFlow: false,
            requirement: 'ALTERNATIVE',
            priority: 10,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticatorFlow: true,
            requirement: 'ALTERNATIVE',
            priority: 20,
            autheticatorFlow: true,
            flowAlias: 'Verify Existing Account by Re-authentication',
            userSetupAllowed: false,
          },
        ],
      },
      {
        id: '9231d6d0-eedd-460f-b186-14f7c4ddfc12',
        alias: 'Browser - Conditional OTP',
        description:
          'Flow to determine if the OTP is required for the authentication',
        providerId: 'basic-flow',
        topLevel: false,
        builtIn: true,
        authenticationExecutions: [
          {
            authenticator: 'conditional-user-configured',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 10,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticator: 'auth-otp-form',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 20,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
        ],
      },
      {
        id: '64b34c03-fe3b-4bb7-a73b-acf1751002d7',
        alias: 'Direct Grant - Conditional OTP',
        description:
          'Flow to determine if the OTP is required for the authentication',
        providerId: 'basic-flow',
        topLevel: false,
        builtIn: true,
        authenticationExecutions: [
          {
            authenticator: 'conditional-user-configured',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 10,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticator: 'direct-grant-validate-otp',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 20,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
        ],
      },
      {
        id: '657d8dbd-41bb-48eb-9b37-fc3dc6a65fc7',
        alias: 'First broker login - Conditional OTP',
        description:
          'Flow to determine if the OTP is required for the authentication',
        providerId: 'basic-flow',
        topLevel: false,
        builtIn: true,
        authenticationExecutions: [
          {
            authenticator: 'conditional-user-configured',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 10,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticator: 'auth-otp-form',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 20,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
        ],
      },
      {
        id: 'a5604df6-bf80-437f-9538-30267f0ba7f4',
        alias: 'Handle Existing Account',
        description:
          'Handle what to do if there is existing account with same email/username like authenticated identity provider',
        providerId: 'basic-flow',
        topLevel: false,
        builtIn: true,
        authenticationExecutions: [
          {
            authenticator: 'idp-confirm-link',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 10,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticatorFlow: true,
            requirement: 'REQUIRED',
            priority: 20,
            autheticatorFlow: true,
            flowAlias: 'Account verification options',
            userSetupAllowed: false,
          },
        ],
      },
      {
        id: '4fac33ac-e58b-4dd0-8ecc-7b9b4b9b3e74',
        alias: 'Reset - Conditional OTP',
        description:
          'Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.',
        providerId: 'basic-flow',
        topLevel: false,
        builtIn: true,
        authenticationExecutions: [
          {
            authenticator: 'conditional-user-configured',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 10,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticator: 'reset-otp',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 20,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
        ],
      },
      {
        id: 'db9680f1-15ae-4e16-806b-794b9689e1ad',
        alias: 'User creation or linking',
        description: 'Flow for the existing/non-existing user alternatives',
        providerId: 'basic-flow',
        topLevel: false,
        builtIn: true,
        authenticationExecutions: [
          {
            authenticatorConfig: 'create unique user config',
            authenticator: 'idp-create-user-if-unique',
            authenticatorFlow: false,
            requirement: 'ALTERNATIVE',
            priority: 10,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticatorFlow: true,
            requirement: 'ALTERNATIVE',
            priority: 20,
            autheticatorFlow: true,
            flowAlias: 'Handle Existing Account',
            userSetupAllowed: false,
          },
        ],
      },
      {
        id: '1f76b4b0-5cb4-478a-b5c8-07873a0a801c',
        alias: 'Verify Existing Account by Re-authentication',
        description: 'Reauthentication of existing account',
        providerId: 'basic-flow',
        topLevel: false,
        builtIn: true,
        authenticationExecutions: [
          {
            authenticator: 'idp-username-password-form',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 10,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticatorFlow: true,
            requirement: 'CONDITIONAL',
            priority: 20,
            autheticatorFlow: true,
            flowAlias: 'First broker login - Conditional OTP',
            userSetupAllowed: false,
          },
        ],
      },
      {
        id: 'f450c3f8-0bfb-42c6-b138-e480125f3bc4',
        alias: 'browser',
        description: 'browser based authentication',
        providerId: 'basic-flow',
        topLevel: true,
        builtIn: true,
        authenticationExecutions: [
          {
            authenticator: 'auth-cookie',
            authenticatorFlow: false,
            requirement: 'ALTERNATIVE',
            priority: 10,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticator: 'auth-spnego',
            authenticatorFlow: false,
            requirement: 'DISABLED',
            priority: 20,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticator: 'identity-provider-redirector',
            authenticatorFlow: false,
            requirement: 'ALTERNATIVE',
            priority: 25,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticatorFlow: true,
            requirement: 'ALTERNATIVE',
            priority: 30,
            autheticatorFlow: true,
            flowAlias: 'forms',
            userSetupAllowed: false,
          },
        ],
      },
      {
        id: '35952ce4-c510-4978-bb2a-c240e20d86bf',
        alias: 'clients',
        description: 'Base authentication for clients',
        providerId: 'client-flow',
        topLevel: true,
        builtIn: true,
        authenticationExecutions: [
          {
            authenticator: 'client-secret',
            authenticatorFlow: false,
            requirement: 'ALTERNATIVE',
            priority: 10,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticator: 'client-jwt',
            authenticatorFlow: false,
            requirement: 'ALTERNATIVE',
            priority: 20,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticator: 'client-secret-jwt',
            authenticatorFlow: false,
            requirement: 'ALTERNATIVE',
            priority: 30,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticator: 'client-x509',
            authenticatorFlow: false,
            requirement: 'ALTERNATIVE',
            priority: 40,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
        ],
      },
      {
        id: 'f5f083a1-8931-4cd6-acbe-8218528cac4f',
        alias: 'direct grant',
        description: 'OpenID Connect Resource Owner Grant',
        providerId: 'basic-flow',
        topLevel: true,
        builtIn: true,
        authenticationExecutions: [
          {
            authenticator: 'direct-grant-validate-username',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 10,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticator: 'direct-grant-validate-password',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 20,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticatorFlow: true,
            requirement: 'CONDITIONAL',
            priority: 30,
            autheticatorFlow: true,
            flowAlias: 'Direct Grant - Conditional OTP',
            userSetupAllowed: false,
          },
        ],
      },
      {
        id: 'a8df0a19-cd53-4cfa-ab81-0ddda38b1b2f',
        alias: 'docker auth',
        description: 'Used by Docker clients to authenticate against the IDP',
        providerId: 'basic-flow',
        topLevel: true,
        builtIn: true,
        authenticationExecutions: [
          {
            authenticator: 'docker-http-basic-authenticator',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 10,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
        ],
      },
      {
        id: '57b5be17-b074-4c48-981a-b57c648b66dc',
        alias: 'first broker login',
        description:
          'Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account',
        providerId: 'basic-flow',
        topLevel: true,
        builtIn: true,
        authenticationExecutions: [
          {
            authenticatorConfig: 'review profile config',
            authenticator: 'idp-review-profile',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 10,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticatorFlow: true,
            requirement: 'REQUIRED',
            priority: 20,
            autheticatorFlow: true,
            flowAlias: 'User creation or linking',
            userSetupAllowed: false,
          },
        ],
      },
      {
        id: '2e213378-ef96-42f8-84fe-76b85d2f8d46',
        alias: 'forms',
        description: 'Username, password, otp and other auth forms.',
        providerId: 'basic-flow',
        topLevel: false,
        builtIn: true,
        authenticationExecutions: [
          {
            authenticator: 'auth-username-password-form',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 10,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticatorFlow: true,
            requirement: 'CONDITIONAL',
            priority: 20,
            autheticatorFlow: true,
            flowAlias: 'Browser - Conditional OTP',
            userSetupAllowed: false,
          },
        ],
      },
      {
        id: 'd8c5c0c1-95e5-41aa-94b4-dd7e03455601',
        alias: 'registration',
        description: 'registration flow',
        providerId: 'basic-flow',
        topLevel: true,
        builtIn: true,
        authenticationExecutions: [
          {
            authenticator: 'registration-page-form',
            authenticatorFlow: true,
            requirement: 'REQUIRED',
            priority: 10,
            autheticatorFlow: true,
            flowAlias: 'registration form',
            userSetupAllowed: false,
          },
        ],
      },
      {
        id: 'fc84a7c2-380a-4719-b7d4-dd7e7ca9b06e',
        alias: 'registration form',
        description: 'registration form',
        providerId: 'form-flow',
        topLevel: false,
        builtIn: true,
        authenticationExecutions: [
          {
            authenticator: 'registration-user-creation',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 20,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticator: 'registration-password-action',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 50,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticator: 'registration-recaptcha-action',
            authenticatorFlow: false,
            requirement: 'DISABLED',
            priority: 60,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticator: 'registration-terms-and-conditions',
            authenticatorFlow: false,
            requirement: 'DISABLED',
            priority: 70,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
        ],
      },
      {
        id: '151f55d4-0880-4ec8-8a5b-510d0ccdf9ca',
        alias: 'reset credentials',
        description:
          'Reset credentials for a user if they forgot their password or something',
        providerId: 'basic-flow',
        topLevel: true,
        builtIn: true,
        authenticationExecutions: [
          {
            authenticator: 'reset-credentials-choose-user',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 10,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticator: 'reset-credential-email',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 20,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticator: 'reset-password',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 30,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
          {
            authenticatorFlow: true,
            requirement: 'CONDITIONAL',
            priority: 40,
            autheticatorFlow: true,
            flowAlias: 'Reset - Conditional OTP',
            userSetupAllowed: false,
          },
        ],
      },
      {
        id: 'f64b36d0-29a9-4ed3-9614-53b2be52ee4d',
        alias: 'saml ecp',
        description: 'SAML ECP Profile Authentication Flow',
        providerId: 'basic-flow',
        topLevel: true,
        builtIn: true,
        authenticationExecutions: [
          {
            authenticator: 'http-basic-authenticator',
            authenticatorFlow: false,
            requirement: 'REQUIRED',
            priority: 10,
            autheticatorFlow: false,
            userSetupAllowed: false,
          },
        ],
      },
    ],
    authenticatorConfig: [
      {
        id: '73f86a44-ba99-4466-9bcf-14a8c1a4c669',
        alias: 'create unique user config',
        config: {
          'require.password.update.after.registration': 'false',
        },
      },
      {
        id: 'bb79d330-a187-4cb2-8283-474cb59318db',
        alias: 'review profile config',
        config: {
          'update.profile.on.first.login': 'missing',
        },
      },
    ],
    requiredActions: [
      {
        alias: 'CONFIGURE_TOTP',
        name: 'Configure OTP',
        providerId: 'CONFIGURE_TOTP',
        enabled: true,
        defaultAction: false,
        priority: 10,
        config: {},
      },
      {
        alias: 'TERMS_AND_CONDITIONS',
        name: 'Terms and Conditions',
        providerId: 'TERMS_AND_CONDITIONS',
        enabled: false,
        defaultAction: false,
        priority: 20,
        config: {},
      },
      {
        alias: 'UPDATE_PASSWORD',
        name: 'Update Password',
        providerId: 'UPDATE_PASSWORD',
        enabled: true,
        defaultAction: false,
        priority: 30,
        config: {},
      },
      {
        alias: 'UPDATE_PROFILE',
        name: 'Update Profile',
        providerId: 'UPDATE_PROFILE',
        enabled: true,
        defaultAction: false,
        priority: 40,
        config: {},
      },
      {
        alias: 'VERIFY_EMAIL',
        name: 'Verify Email',
        providerId: 'VERIFY_EMAIL',
        enabled: true,
        defaultAction: false,
        priority: 50,
        config: {},
      },
      {
        alias: 'delete_account',
        name: 'Delete Account',
        providerId: 'delete_account',
        enabled: false,
        defaultAction: false,
        priority: 60,
        config: {},
      },
      {
        alias: 'webauthn-register',
        name: 'Webauthn Register',
        providerId: 'webauthn-register',
        enabled: true,
        defaultAction: false,
        priority: 70,
        config: {},
      },
      {
        alias: 'webauthn-register-passwordless',
        name: 'Webauthn Register Passwordless',
        providerId: 'webauthn-register-passwordless',
        enabled: true,
        defaultAction: false,
        priority: 80,
        config: {},
      },
      {
        alias: 'VERIFY_PROFILE',
        name: 'Verify Profile',
        providerId: 'VERIFY_PROFILE',
        enabled: true,
        defaultAction: false,
        priority: 90,
        config: {},
      },
      {
        alias: 'update_user_locale',
        name: 'Update User Locale',
        providerId: 'update_user_locale',
        enabled: true,
        defaultAction: false,
        priority: 1000,
        config: {},
      },
    ],
    browserFlow: 'browser',
    registrationFlow: 'registration',
    directGrantFlow: 'direct grant',
    resetCredentialsFlow: 'reset credentials',
    clientAuthenticationFlow: 'clients',
    dockerAuthenticationFlow: 'docker auth',
    firstBrokerLoginFlow: 'first broker login',
    attributes: {
      cibaBackchannelTokenDeliveryMode: 'poll',
      cibaAuthRequestedUserHint: 'login_hint',
      oauth2DevicePollingInterval: '5',
      clientOfflineSessionMaxLifespan: '0',
      clientSessionIdleTimeout: '0',
      'actionTokenGeneratedByUserLifespan.verify-email': '',
      'actionTokenGeneratedByUserLifespan.idp-verify-account-via-email': '',
      clientOfflineSessionIdleTimeout: '0',
      'actionTokenGeneratedByUserLifespan.execute-actions': '',
      cibaInterval: '5',
      realmReusableOtpCode: 'false',
      cibaExpiresIn: '120',
      oauth2DeviceCodeLifespan: '600',
      parRequestUriLifespan: '60',
      clientSessionMaxLifespan: '0',
      shortVerificationUri: '',
      'actionTokenGeneratedByUserLifespan.reset-credentials': '',
    },
    keycloakVersion: '24.0.2',
    userManagedAccessAllowed: false,
    clientProfiles: {
      profiles: [],
    },
    clientPolicies: {
      policies: [],
    },
  })

  return (
    <KeycloakConfigurationContext.Provider
      value={{
        config,
        setConfig,
      }}
    >
      {children}
    </KeycloakConfigurationContext.Provider>
  )
}
